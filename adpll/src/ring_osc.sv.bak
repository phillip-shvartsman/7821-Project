module ring_osc #(NUM_LUTS = 10) (
//rts	input clk,
	output osc_out
);

wire [NUM_LUTS-1:0] lut_wire;
wire xor_lut;
(* preserve *) wire static_clk;

(* preserve *) reg constant; //rts

genvar i;
generate for (i=0;i<NUM_LUTS-1;i++) // Only do NUM_LUTs-1 instances, as another LUT will be added to do the XOR
begin : lut_ring

	LCELL lcell_inst (
		.in  ( lut_wire[i] ),
		.out ( lut_wire[i+1] )
);

end
endgenerate

always_ff @ (posedge static_clk)
	constant <= 1'b0;

assign lut_wire[0] = lut_wire[NUM_LUTS-1] ^ !constant;

assign osc_out = lut_wire[NUM_LUTS-1];

endmodule
